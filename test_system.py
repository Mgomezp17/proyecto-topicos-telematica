#!/usr/bin/env python3
"""
Script de prueba para verificar el funcionamiento del sistema GridDFS
"""

import asyncio
import os
import tempfile
import time

import httpx

from client.api_client_external import GridDFSClientExternal


async def test_system():
    """Prueba completa del sistema GridDFS"""
    print("üß™ Iniciando pruebas del sistema GridDFS")
    print("=" * 50)

    # Crear cliente
    client = GridDFSClientExternal("http://localhost:8000")

    # 1. Verificar conectividad con NameNode
    print("\n1Ô∏è‚É£ Verificando conectividad con NameNode...")
    try:
        async with httpx.AsyncClient() as http_client:
            response = await http_client.get("http://localhost:8000/health")
            if response.status_code == 200:
                print("‚úÖ NameNode responde correctamente")
            else:
                print("‚ùå NameNode no responde correctamente")
                return False
    except Exception as e:
        print(f"‚ùå Error conectando al NameNode: {e}")
        return False

    # 2. Verificar DataNodes
    print("\n2Ô∏è‚É£ Verificando DataNodes...")
    datanodes_ok = 0
    for port in [8001, 8002, 8003]:
        try:
            async with httpx.AsyncClient() as http_client:
                response = await http_client.get(f"http://localhost:{port}/health")
                if response.status_code == 200:
                    print(f"‚úÖ DataNode en puerto {port} responde")
                    datanodes_ok += 1
                else:
                    print(f"‚ùå DataNode en puerto {port} no responde")
        except Exception as e:
            print(f"‚ùå Error conectando al DataNode en puerto {port}: {e}")

    if datanodes_ok < 2:
        print("‚ùå Se necesitan al menos 2 DataNodes funcionando")
        return False

    print(f"‚úÖ {datanodes_ok}/3 DataNodes funcionando")

    # 3. Registrar usuario de prueba (o usar existente)
    print("\n3Ô∏è‚É£ Registrando usuario de prueba...")
    success = await client.register("testuser", "test@example.com", "testpass123")
    if success:
        print("‚úÖ Usuario registrado exitosamente")
    else:
        print("‚ÑπÔ∏è Usuario ya existe, continuando con login...")

    # 4. Iniciar sesi√≥n
    print("\n4Ô∏è‚É£ Iniciando sesi√≥n...")
    success = await client.login("testuser", "testpass123")
    if success:
        print("‚úÖ Sesi√≥n iniciada exitosamente")
    else:
        print("‚ùå Error iniciando sesi√≥n")
        return False

    # 5. Crear directorio de prueba
    print("\n5Ô∏è‚É£ Creando directorio de prueba...")
    success = await client.create_directory("/test_dir")
    if success:
        print("‚úÖ Directorio creado exitosamente")
    else:
        print("‚ùå Error creando directorio")
        return False

    # 6. Crear archivo de prueba
    print("\n6Ô∏è‚É£ Creando archivo de prueba...")
    import time

    timestamp = int(time.time())
    test_content = "Este es un archivo de prueba para GridDFS\n" * 1000  # ~30KB
    test_file_path = f"/tmp/griddfs_test_{timestamp}.txt"

    with open(test_file_path, "w") as f:
        f.write(test_content)

    print(f"‚úÖ Archivo de prueba creado: {test_file_path}")

    # 7. Subir archivo
    print("\n7Ô∏è‚É£ Subiendo archivo...")
    success = await client.put_file(
        test_file_path, f"/test_dir/test_file_{timestamp}.txt"
    )
    if success:
        print("‚úÖ Archivo subido exitosamente")
    else:
        print("‚ùå Error subiendo archivo")
        return False

    # 8. Listar archivos
    print("\n8Ô∏è‚É£ Listando archivos...")
    files = await client.list_files("/test_dir")
    if files:
        print(f"‚úÖ Archivos encontrados: {len(files)}")
        for file in files:
            print(f"   - {file['filename']} ({file['size']} bytes)")
    else:
        print("‚ùå No se encontraron archivos")
        return False

    # 9. Descargar archivo
    print("\n9Ô∏è‚É£ Descargando archivo...")
    download_path = f"/tmp/griddfs_download_{timestamp}.txt"
    success = await client.get_file(
        f"/test_dir/test_file_{timestamp}.txt", download_path
    )
    if success:
        print("‚úÖ Archivo descargado exitosamente")

        # Verificar contenido
        with open(download_path, "r") as f:
            downloaded_content = f.read()

        if downloaded_content == test_content:
            print("‚úÖ Contenido del archivo verificado correctamente")
        else:
            print("‚ùå El contenido del archivo no coincide")
            return False
    else:
        print("‚ùå Error descargando archivo")
        return False

    # 10. Eliminar archivo
    print("\nüîü Eliminando archivo...")
    success = await client.delete_file(f"/test_dir/test_file_{timestamp}.txt")
    if success:
        print("‚úÖ Archivo eliminado exitosamente")
    else:
        print("‚ùå Error eliminando archivo")
        return False

    # 11. Verificar eliminaci√≥n
    print("\n1Ô∏è‚É£1Ô∏è‚É£ Verificando eliminaci√≥n...")
    files = await client.list_files("/test_dir")
    if not files:
        print("‚úÖ Archivo eliminado correctamente")
    else:
        print("‚ùå El archivo no se elimin√≥ correctamente")
        return False

    # 12. Eliminar directorio
    print("\n1Ô∏è‚É£2Ô∏è‚É£ Eliminando directorio...")
    success = await client.remove_directory("/test_dir")
    if success:
        print("‚úÖ Directorio eliminado exitosamente")
    else:
        print("‚ùå Error eliminando directorio")
        return False

    # Limpiar archivos temporales
    try:
        os.remove(test_file_path)
        os.remove(download_path)
    except:
        pass

    print("\n" + "=" * 50)
    print("üéâ ¬°Todas las pruebas pasaron exitosamente!")
    print("‚úÖ El sistema GridDFS est√° funcionando correctamente")

    return True


async def test_large_file():
    """Prueba con archivo grande para verificar distribuci√≥n de bloques"""
    print("\nüß™ Prueba con archivo grande (distribuci√≥n de bloques)")
    print("=" * 50)

    client = GridDFSClientExternal("http://localhost:8000")

    # Iniciar sesi√≥n
    await client.login("testuser", "testpass123")

    # Crear archivo grande (~100MB)
    large_file_path = "/tmp/griddfs_large_test.dat"
    chunk_size = 1024 * 1024  # 1MB
    total_size = 100 * 1024 * 1024  # 100MB

    print(f"üìÅ Creando archivo grande: {total_size / (1024*1024):.1f}MB")

    with open(large_file_path, "wb") as f:
        for i in range(total_size // chunk_size):
            # Crear datos pseudo-aleatorios
            chunk = f"Chunk {i:06d}".encode() * (chunk_size // 10)
            f.write(chunk[:chunk_size])

    print("‚úÖ Archivo grande creado")

    # Subir archivo
    print("üì§ Subiendo archivo grande...")
    start_time = time.time()
    success = await client.put_file(large_file_path, "/large_test.dat")
    upload_time = time.time() - start_time

    if success:
        print(f"‚úÖ Archivo subido en {upload_time:.2f} segundos")
        print(f"üìä Velocidad: {total_size / (1024*1024) / upload_time:.2f} MB/s")
    else:
        print("‚ùå Error subiendo archivo grande")
        return False

    # Listar archivos para verificar
    files = await client.list_files("/")
    large_file = None
    for file in files:
        if file["filename"] == "large_test.dat":
            large_file = file
            break

    if large_file:
        print(f"üìã Archivo registrado:")
        print(f"   - Tama√±o: {large_file['size']} bytes")
        print(f"   - Bloques: {large_file['num_blocks']}")
        print(f"   - Tama√±o de bloque: {large_file['block_size']} bytes")
    else:
        print("‚ùå Archivo grande no encontrado en la lista")
        return False

    # Descargar archivo
    print("üì• Descargando archivo grande...")
    download_path = "/tmp/griddfs_large_download.dat"
    start_time = time.time()
    success = await client.get_file("/large_test.dat", download_path)
    download_time = time.time() - start_time

    if success:
        print(f"‚úÖ Archivo descargado en {download_time:.2f} segundos")
        print(f"üìä Velocidad: {total_size / (1024*1024) / download_time:.2f} MB/s")

        # Verificar tama√±o
        if os.path.getsize(download_path) == total_size:
            print("‚úÖ Tama√±o del archivo verificado correctamente")
        else:
            print("‚ùå El tama√±o del archivo no coincide")
            return False
    else:
        print("‚ùå Error descargando archivo grande")
        return False

    # Limpiar
    try:
        os.remove(large_file_path)
        os.remove(download_path)
        await client.delete_file("/large_test.dat")
    except:
        pass

    print("‚úÖ Prueba con archivo grande completada")
    return True


if __name__ == "__main__":
    print("üöÄ Iniciando pruebas del sistema GridDFS")
    print("Aseg√∫rate de que el sistema est√© ejecut√°ndose con: ./start.sh")
    print("Y que el cliente est√© configurado con: cd client && ./setup_client.sh")
    print()

    # Ejecutar pruebas b√°sicas
    basic_success = asyncio.run(test_system())

    if basic_success:
        # Ejecutar prueba con archivo grande
        large_success = asyncio.run(test_large_file())

        if large_success:
            print("\nüéâ ¬°Todas las pruebas completadas exitosamente!")
            print("‚úÖ El sistema GridDFS est√° funcionando perfectamente")
        else:
            print("\n‚ùå Prueba con archivo grande fall√≥")
    else:
        print("\n‚ùå Pruebas b√°sicas fallaron")
        print("üí° Verifica que el sistema est√© ejecut√°ndose correctamente")
